<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>IUCN Red List Mapper</title>
        <script type="text/javascript">
            djConfig = {
                parseOnLoad: true
            }
        </script>
        <script src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=2.2" type="text/javascript">
        </script>
        <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/2.1/js/dojo/dijit/themes/claro/claro.css">
        <link rel="stylesheet" type="text/css" href="styles/styles.css">
        <style type="text/css">
            html, body {
                width: 100%;
                height: 100%;
                margin: 0px;
            }
            
            #borderContainer {
                width: 100%;
                height: 100%;
            }
        </style>
        <script src="js/constants.js" type="text/javascript">
        </script>
        <script src="js/tempo.js" type="text/javascript">
        </script>
        <script type="text/javascript">
            dojo.require("dijit.dijit");
            dojo.require("dijit.layout.ContentPane");
            dojo.require("dijit.layout.BorderContainer");
            dojo.require("dijit.layout.TabContainer");
            dojo.require("esri.map");
            dojo.declare("CloudMadeLayer", esri.layers.TiledMapServiceLayer, {
                size: 256,
                styleid: 8,
                apikey: "",
                constructor: function(){
                    this.spatialReference = new esri.SpatialReference({
                        "wkid": 102113
                    });
                    
                    //layer provides tile info                    
                    this.tileInfo = new esri.layers.TileInfo({
                        "rows": 256,
                        "cols": 256,
                        "dpi": 96,
                        "format": "PNG8",
                        "compressionQuality": 0,
                        "origin": {
                            "x": -20037508.342787,
                            "y": 20037508.342787
                        },
                        "spatialReference": {
                            "wkid": 102113
                        },
                        "lods": [{
                            "level": 0,
                            "scale": 591657527.591555,
                            "resolution": 156543.033928
                        }, {
                            "level": 1,
                            "scale": 295828763.795777,
                            "resolution": 78271.5169639999
                        }, {
                            "level": 2,
                            "scale": 147914381.897889,
                            "resolution": 39135.7584820001
                        }, {
                            "level": 3,
                            "scale": 73957190.948944,
                            "resolution": 19567.8792409999
                        }, {
                            "level": 4,
                            "scale": 36978595.474472,
                            "resolution": 9783.93962049996
                        }, {
                            "level": 5,
                            "scale": 18489297.737236,
                            "resolution": 4891.96981024998
                        }, {
                            "level": 6,
                            "scale": 9244648.868618,
                            "resolution": 2445.98490512499
                        }, {
                            "level": 7,
                            "scale": 4622324.434309,
                            "resolution": 1222.99245256249
                        }, {
                            "level": 8,
                            "scale": 2311162.217155,
                            "resolution": 611.49622628138
                        }, {
                            "level": 9,
                            "scale": 1155581.108577,
                            "resolution": 305.748113140558
                        }, {
                            "level": 10,
                            "scale": 577790.554289,
                            "resolution": 152.874056570411
                        }, {
                            "level": 11,
                            "scale": 288895.277144,
                            "resolution": 76.4370282850732
                        }, {
                            "level": 12,
                            "scale": 144447.638572,
                            "resolution": 38.2185141425366
                        }, {
                            "level": 13,
                            "scale": 72223.819286,
                            "resolution": 19.1092570712683
                        }, {
                            "level": 14,
                            "scale": 36111.909643,
                            "resolution": 9.55462853563415
                        }, {
                            "level": 15,
                            "scale": 18055.954822,
                            "resolution": 4.77731426794937
                        }, {
                            "level": 16,
                            "scale": 9027.977411,
                            "resolution": 2.38865713397468
                        }, {
                            "level": 17,
                            "scale": 4513.988705,
                            "resolution": 1.19432856685505
                        }, {
                            "level": 18,
                            "scale": 2256.994353,
                            "resolution": 0.597164283559817
                        }]
                    });
                    
                    //layer provides initial extent & full extent.
                    this.fullExtent = this.initialExtent = new esri.geometry.Extent({
                        "xmin": -20037508.34,
                        "ymin": -20037508.34,
                        "xmax": 20037508.34,
                        "ymax": 20037508.34,
                        "spatialReference": {
                            "wkid": 102113
                        }
                    });
                    
                    //custom layer properties for improving layer performance by retrieving tiled images from multiple servers
                    this.servers = ["http://a.tile.cloudmade.com/", "http://b.tile.cloudmade.com/", "http://c.tile.cloudmade.com/"];
                    this.serversLength = this.servers.length;
                    this.serverIndex = 0;
                },
                setAPIKey: function(/*string*/){
                    if (arguments[0]) {
                        this.apikey = arguments[0];
                        this.loaded = true;
                        this.onLoad(this);
                    }
                    else {
                        alert("No API key provided");
                    }
                    return this; //for chaining          
                },
                setStyle: function(/*int*/){
                    this.styleid = 34085;// mine
                    //                    this.styleid = 20760;//Gris=gris
                },
                getTileUrl: function(level, row, col){
                    //implement abstract method and return url to cached tile based on level/row/column
                    return this.servers[this.serverIndex++ % this.serversLength] + this.apikey + "/" + this.styleid + "/" + this.size + "/" + level + "/" + col + "/" + row + ".png";
                }
            });
            
            var map, protectionLayer, protectionLayer2, cmlayer, extentMap;
            var layerDefinitions = []; //used to filter the results for an individual species
            dojo.addOnLoad(onLoad);
            
            function onLoad(){
                ID_NO = getSpeciesID(); //get the species ID from the query string
                getExtent(ID_NO); //get the extent of the current species
                getSpeciesInfo(ID_NO); //get the species info
                map = new esri.Map("map", {
                    wrapAround180: true
                });
                dojo.connect(map, "onLoad", showLoading); //disable the map navigation controls until we have zoomed to the species extent
                extentMap = new esri.Map("extentMap", {
                    wrapAround180: true,
                    slider: false,
                    nav: false
                });
                //BASEMAP FOR THE OVERVIEW MAP
                var basemap = new esri.layers.ArcGISTiledMapServiceLayer("http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer");
                extentMap.addLayer(basemap);
                dojo.connect(extentMap, "onLoad", loadExtentMap); //disable the map navigation controls for the extent map
                dojo.connect(map, "onZoomStart", showLoading);
                dojo.connect(map, "onPanStart", showLoading);
                
                //CLOUD MADE LAYER FOR THE MAP
                cmlayer = new CloudMadeLayer().setAPIKey("c77488293ca54a9cb28552018e1b540d"); //instantiate the cloud made layer
                cmlayer.setStyle(); //set the style of the cloud made layer
                map.addLayer(cmlayer); //add the cloud made layer to the map
                dojo.connect(map, "onExtentChange", extentChanged); //wire the extent change event of the map to draw the polygon on the overview map
                //                dojo.byId("copyright").innerHTML = "&nbsp;&copy; 2009 <a target=_blank href='http://cloudmade.com' tabindex=-1>CloudMade</a> - Map data <a target=_blank href='http://creativecommons.org/licenses/by-sa/2.0/' tabindex=-1>CCBYSA</a> 2009 <a target=_blank href='http://openstreetmap.org' tabindex=-1>OpenStreetMap.org</a> contributors - <a target=_blank href='http://cloudmade.com/terms_conditions' tabindex=-1>Terms of Use</a>&nbsp;";
                
                //RDB LAYER FOR THE MAP
                var imageParameters = new esri.layers.ImageParameters(); //image parameters for the rdb layer
                imageParameters.layerIds = [0]; //layer filter
                imageParameters.layerOption = esri.layers.ImageParameters.LAYER_OPTION_SHOW;
                rdbLayer = new esri.layers.ArcGISDynamicMapServiceLayer("http://79.125.16.106/ArcGIS/rest/services/Andrew/MapperDemo/MapServer?token=" + token, {
                    "imageParameters": imageParameters,
                    opacity: 0.7
                });
                layerDefinitions[0] = "ID_NO='" + ID_NO + "'"; //set the initial definition expression
                rdbLayer.setLayerDefinitions(layerDefinitions); //apply the definition expression
                map.addLayer(rdbLayer); //add the species layer
                //PROTECTION LAYER FOR THE MAP
                var imageParameters2 = new esri.layers.ImageParameters();
                imageParameters2.layerIds = [1];
                imageParameters2.layerOption = esri.layers.ImageParameters.LAYER_OPTION_SHOW;
                protectionLayer = new esri.layers.ArcGISDynamicMapServiceLayer("http://79.125.16.106/ArcGIS/rest/services/Andrew/MapperDemo/MapServer?token=" + token, {
                    "imageParameters": imageParameters2,
                    opacity: 0.7
                });
                //ALL PROTECTION LAYER FOR THE MAP
                var imageParameters3 = new esri.layers.ImageParameters();
                imageParameters3.layerIds = [2];
                imageParameters3.layerOption = esri.layers.ImageParameters.LAYER_OPTION_SHOW;
                protectionLayer2 = new esri.layers.ArcGISDynamicMapServiceLayer("http://79.125.16.106/ArcGIS/rest/services/Andrew/MapperDemo/MapServer?token=" + token, {
                    "imageParameters": imageParameters3,
                    opacity: 0.4
                });
                map.addLayer(protectionLayer2); //add the protection layer
                protectionLayer2.hide();
                map.addLayer(protectionLayer); //add the protection layer
                protectionLayer.hide();
                var tabs = dijit.byId("tabs");
                dojo.connect(tabs, "selectChild", changeTab);
                getProtectedAreas();
            }
            
            //GETS THE SPECIES ID FROM THE QUERYSTRING
            function getSpeciesID(){
                var queryParams = dojo.queryToObject(window.location.search.slice(1)); //get the query parameters
                var ID_NO = parseInt(queryParams["ID_NO"]); //get the ID_NO for the species
                return ID_NO;
            }
            
            //SHOWS THE LOADING IMAGE WHEN THE RDB LAYER IS LOADING
            function showLoading(){
                div = dojo.byId("loadingDiv");
                div.style.visibility = "visible";
                map.disableMapNavigation();
                //                map.hideZoomSlider();
            }
            
            //HIDES THE LOADING IMAGE WHEN THE RDB LAYER IS LOADING
            function hideLoading(){
                //                esri.hide(loadingDiv); - doesnt work in Firefox - loadingDiv not defined!!
                div = dojo.byId("loadingDiv");
                div.style.visibility = "hidden";
                map.enableMapNavigation();
                //                map.showZoomSlider();
            }
            
            //GETS THE EXTENT OF THE PASSED SPECIES USING A GP TASK
            function getExtent(spcID){
                gp = new esri.tasks.Geoprocessor("http://79.125.16.106/ArcGIS/rest/services/IUCN_Secure/GetExtent/GPServer/Get%20Extent?token=" + token);
                var params = {
                    "ID_NO": spcID
                };
                gp.submitJob(params, jobCompleted);
            }
            
            //AJAX RETURN CALL WITH THE EXTENT
            function jobCompleted(jobInfo){
                gp.getResultData(jobInfo.jobId, "Extent", extentReturned);
            }
            
            //CONVERT THE AJAX OBJECT TO AN EXTENT AND SET THE MAPS EXTENT
            function extentReturned(data){
                var obj = dojo.fromJson(data.value);
                var extent = new esri.geometry.Extent(obj);
                map.setExtent(extent, true);
                dojo.connect(rdbLayer, "onUpdate", hideLoading); //now we have zoomed to the extent, wire up the rdblayer update to hide the loading icon when it has finished updating
            }
            
            //DISABLE THE INTERACTIVITY IN THE OVERVIEW MAP
            function loadExtentMap(){
                extentMap.disableKeyboardNavigation();
                extentMap.disableMapNavigation();
                extentMap.disablePan();
            }
            
            //CALLED WHEN THE MAP EXTENT CHANGES AND DRAWS THE POLYGON ON THE OVERVIEW MAP
            function extentChanged(extent){
                extentMap.graphics.clear();
                var polygon = new esri.geometry.Polygon(new esri.SpatialReference({
                    wkid: 102100
                }));
                polygon.addRing([[extent.xmin, extent.ymin], [extent.xmin, extent.ymax], [extent.xmax, extent.ymax], [extent.xmax, extent.ymin], [extent.xmin, extent.ymin]]); //create the polygon for the overview map
                var screenGeometry = esri.geometry.toScreenGeometry(extentMap.extent, extentMap.width, extentMap.height, polygon); //convert it to a screen geometry to see how big it will be
                var screenPolygon = screenGeometry.rings[0]; //get the first ring of the screen geometry
                var minX = screenPolygon[0][0]; //get the minimum x screen coordinate
                var maxX = screenPolygon[2][0]; //get the maximum x screen coordinate
                if ((maxX - minX) < 3) { //if the polygon is smaller than 3 pixels across then it will not be visible, so draw as a point symbol
                    var centroid = extent.getCenter(); //get the centroid of the extent
                    symbol = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_SQUARE, 3, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 1), new dojo.Color([255, 0, 0]), 1);
                    extentMap.graphics.add(new esri.Graphic(centroid, symbol)); //create a simple marker symbol at the centroid of the extent
                }
                else {
                    symbol = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 1);
                    extentMap.graphics.add(new esri.Graphic(polygon, symbol));//create a polygon that is the size and shape of the main map
                }
            }
            
            //CALLED WHEN THE USER CHANGES TABS
            function changeTab(child){
                if (child.id == 'speciesTab') {
                    protectionLayer.hide();
                    protectionLayer2.hide();
                }
                else {
                    protectionLayer.show();
                    protectionLayer2.show();
                }
            }
            
            //CALLED WHEN THE PAGE LOADS AND GETS THE SPECIES INFO
            function getSpeciesInfo(spcID){
                var queryTask = new esri.tasks.QueryTask("http://79.125.16.106/ArcGIS/rest/services/IUCN_Secure/Species_WebMercator/MapServer/1?token=" + token); //instantiate a querytask that will be used to get the species binomial
                var query = new esri.tasks.Query(); //instantiate a query to filter the query task
                query.returnGeometry = false;
                query.outFields = ["friendly_name", "rl_category"];
                query.where = "tax_id=" + spcID;
                queryTask.execute(query, showResults); //call the query to get the binomial
            }
            
            //ASYNCHRONOUS CALLBACK FUNCTION WITH THE RESULTS FOR THE SPECIES BINOMIAL
            function showResults(results){
                if (results.features.length > 0) {
                    var featureAttributes = results.features[0].attributes; //get the attributes of any features returned
                    dojo.byId("species").innerHTML = "<i>" + featureAttributes["friendly_name"] + "</i>"; //set the text in the UI
                    dojo.attr(dojo.byId("species"), "class", "Status " + featureAttributes["rl_category"]);
                    dojo.doc.title = featureAttributes["friendly_name"]; //set the document title
                    dojo.byId("statusImage").src = "images/200px-Status_iucn3.1_" + featureAttributes["rl_category"] + ".svg.png";
                    
                }
                else {
                    dojo.byId("title").innerHTML = "No species found";
                }
            }
            
            //FUNCTION TO RETRIEVE ALL OF THE PROTECTED AREAS INFORMATION FOR THE SPECIES
            function getProtectedAreas(){
                var queryTask = new esri.tasks.QueryTask("http://79.125.16.106/ArcGIS/rest/services/Andrew/MapperDemo/MapServer/1?token=" + token); //instantiate a querytask that will be used to get the protected area information
                var query = new esri.tasks.Query(); //instantiate a query to filter the query task
                query.returnGeometry = false;
                query.outFields = ["wdpaid", "pa_name", "pa_image", "pa_type","pa_percent"];
                query.where = "objectID>-1";
                queryTask.execute(query, showPAResults); //call the query to get the binomial
            }
            
            function showPAResults(results){
                Tempo.prepare("paTemplate").render(results.features);
            }
        </script>
    </head>
    <body class="claro">
        <div dojotype="dijit.layout.BorderContainer" design="sidebar" id="borderContainer" gutters="false">
            <div dojoType="dijit.layout.ContentPane" region="left" style="width:75%">
                <div id="map" dojotype="dijit.layout.ContentPane" style="border:solid thin silver;margin-left:10px;margin-bottom:10px;margin-top:10px">
                    <div id="loadingDiv" style="width:16px;left:50%;top:50%;position:absolute;z-index:100">
                        <img id="loadingImg" src="images/loading.gif" alt="Loading image"/>
                    </div>
                </div>
            </div>
            <div dojoType="dijit.layout.ContentPane" region="right" style="width:25%">
                <div dojoType="dijit.layout.TabContainer" style="border:solid thin silver;margin:10px" id="tabs">
                    <div dojoType="dijit.layout.ContentPane" title="Species" selected="true" id="speciesTab">
                        <div id="species">
                        </div>
                        <img id="statusImage" alt="statusImage" src="" class="statusImage paImage">
                        <img src="http://i789.photobucket.com/albums/yy179/brezzy868792/orangutan.jpg" alt="Orang Utan Photo" style="width:200px">
                        <div id="extentMap" region="centre">
                        </div>
                    </div>
                    <div dojoType="dijit.layout.ContentPane" title="Protection" id="protectionTab">
                        <div style="color:#fefefe;font-size:25px;background-color:#333666;padding:10px">22.7%</div>
                        <div style="color:#fefefe;font-size:13px;background-color:#333666;padding-left:10px;padding-right:10px;padding-bottom:10px">of the species range lies within protected areas</div>
                        <div id="paTemplate" class="paList">
                            <ul>
                                <li data-template class="ac_even" style="display:none">
                                    <div class="paText" onclick="alert('wibble')">
                                        {{attributes.pa_name}}
                                        <br>
                                        <span>{{attributes.pa_type}}</span>
                                    </div>
                                    <div class="paPercent">{{attributes.pa_percent}}</div>
                                </li>
                                <li data-template data-if-attributes.pa_image="notnull" class="ac_even" style="display:none">
                                    <img src="{{attributes.pa_image}}" alt="PA Image" class="paImage"/>
                                    <div class="paText">
                                        {{attributes.pa_name}}
                                        <br>
                                        <span>{{attributes.pa_type}}</span>
                                    </div>
                                    <div class="paPercent">{{attributes.pa_percent}}</div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
