<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>IUCN Red List Mapper</title>
        <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/2.2/js/dojo/dijit/themes/tundra/tundra.css">
        <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/2.2/js/esri/dijit/css/Popup.css">
        <link rel="stylesheet" type="text/css" href="styles/styles.css">
        <script type="text/javascript">
            var djConfig = {
                parseOnLoad: true
            };
        </script>
        <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=2.2">
        </script>
        <script src="js/constants.js" type="text/javascript">
        </script>
        <script src="js/tempo.js" type="text/javascript">
        </script>
        <script type="text/javascript">
            dojo.require("dijit.layout.BorderContainer");
            dojo.require("dijit.layout.ContentPane");
            dojo.require("esri.toolbars.navigation");
            dojo.require("dijit.form.Button");
            dojo.require("dijit.Toolbar");
            dojo.require("dijit.dijit");
            dojo.require("dijit.form.Button");
            dojo.require("esri.dijit.BasemapGallery");
            dojo.require("esri.dijit.Scalebar");
            dojo.require("dijit.TitlePane");
            dojo.require("dojo.window");
            dojo.require("esri.map");
            var map, extentMap, renderer, navToolbar;
            var layerDefinitions = []; //used to filter the results for an individual species
            dojo.addOnLoad(onLoad);
            
            function onLoad(){
                ID_NO = getSpeciesID(); //get the species ID from the query string
                getExtent2(ID_NO); //get the extent of the current species
                getSpeciesInfo(ID_NO); //get the species info
                map = new esri.Map("map", {
                    wrapAround180: true
                });
                dojo.connect(map, "onLoad", showLoading); //disable the map navigation controls until we have zoomed to the species extent
                extentMap = new esri.Map("extentMap", {
                    slider: false,
                    nav: false
                });
                //BASEMAP FOR THE OVERVIEW MAP
                var basemap = new esri.layers.ArcGISTiledMapServiceLayer("http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer");
                extentMap.addLayer(basemap);
                dojo.connect(extentMap, "onLoad", loadExtentMap); //disable the map navigation controls for the extent map
                dojo.connect(map, "onLoad", createScaleBar);
                dojo.connect(map, "onZoomStart", showLoading);
                dojo.connect(map, "onPanStart", showLoading);
                dojo.connect(map, "onExtentChange", extentChanged);
                
                //ADD THE DYNAMIC LAYERS TO THE MAP
                var basemap = new esri.layers.ArcGISTiledMapServiceLayer("http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer");
                map.addLayer(basemap);
                
                rdbLayer = addDynamicLayer(0, "http://79.125.16.106/ArcGIS/rest/services/Andrew/MapperDemo/MapServer", "ID_NO='" + ID_NO + "'", 0.7);
                navToolbar = new esri.toolbars.Navigation(map);
                dojo.connect(navToolbar, "onExtentHistoryChange", extentHistoryChangeHandler);
                dojo.connect(dijit.byId('map'), 'resize', resizeMap);
                createBasemapGallery();
            }
            
            function createScaleBar(){
                var scalebar = new esri.dijit.Scalebar({
                    map: map
                });
            }
            
            function createBasemapGallery(){
                //add the basemap gallery
                var basemapGallery = new esri.dijit.BasemapGallery({
                    map: map,
                    bingMapsKey: "ApEtXt6OQmIxxBtaii01DEEG23Fx8OjcYrVFzWogoW96NcsjHsI6U8XjzdeG73RP"
                }, "basemapGallery");
                basemapGallery.startup();
                //                dojo.connect(basemapGallery, "onSelectionChange", hideBasemapGallery);
                dojo.connect(basemapGallery, "onError", function(msg){
                    console.log(msg)
                });
            }
            
            function showBasemapGallery(){
                var button = dojo.byId("basemapGalleryButton");
                var coords = dojo.coords(button);
                var div = dojo.byId("basemapGalleryDiv");
                var windowBox = dojo.window.getBox();
                var divHeightStr = div.style.height;
                var divHeight = divHeightStr.substr(0, divHeightStr.length - 2);
                div.style.right = (windowBox.w - coords.x) + "px";
                div.style.top = Math.round((windowBox.h - divHeight) / 2) + "px";
                div.style.visibility = "visible";
            }
            
            function hideBasemapGallery(){
                div = dojo.byId("basemapGalleryDiv");
                div.style.visibility = "hidden";
            }
            
            function addDynamicLayer(layerID, url, definitionExpression, opacity){
                var imageParameters = new esri.layers.ImageParameters(); //image parameters for the layer
                imageParameters.layerIds = [layerID]; //layer filter
                imageParameters.layerOption = esri.layers.ImageParameters.LAYER_OPTION_SHOW;
                dynamicLayer = new esri.layers.ArcGISDynamicMapServiceLayer(url + "?token=" + token, {
                    "imageParameters": imageParameters,
                    opacity: opacity
                });
                if (definitionExpression) {
                    layerDefinitions[layerID] = definitionExpression; //set the initial definition expression
                    dynamicLayer.setLayerDefinitions(layerDefinitions); //apply the definition expression
                }
                map.addLayer(dynamicLayer);
                return dynamicLayer;
            }
            
            function extentHistoryChangeHandler(){
                dijit.byId("zoomprev").disabled = navToolbar.isFirstExtent();
                dijit.byId("zoomnext").disabled = navToolbar.isLastExtent();
            }
            
            function resizeMap(){
                //resize the map when the browser resizes - view the 'Resizing and repositioning the map' section in 
                //the following help topic for more details http://help.esri.com/EN/webapi/javascript/arcgis/help/jshelp_start.htm#jshelp/inside_guidelines.htm
                var resizeTimer;
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function(){
                    map.resize();
                    map.reposition();
                }, 500);
            }
            
            //GETS THE SPECIES ID FROM THE QUERYSTRING
            function getSpeciesID(){
                var queryParams = dojo.queryToObject(window.location.search.slice(1)); //get the query parameters
                var ID_NO = parseInt(queryParams["ID_NO"]); //get the ID_NO for the species
                return ID_NO;
            }
            
            //SHOWS THE LOADING IMAGE WHEN THE RDB LAYER IS LOADING
            function showLoading(){
                div = dojo.byId("loadingDiv");
                div.style.visibility = "visible";
                map.disableMapNavigation();
                //                map.hideZoomSlider();
            }
            
            //HIDES THE LOADING IMAGE WHEN THE RDB LAYER IS LOADING
            function hideLoading(){
                //                esri.hide(loadingDiv); - doesnt work in Firefox - loadingDiv not defined!!
                div = dojo.byId("loadingDiv");
                div.style.visibility = "hidden";
                map.enableMapNavigation();
                //                map.showZoomSlider();
            }
            
            //GETS THE EXTENT OF THE PASSED SPECIES USING A SOE
            function getExtent2(spcID){
                esri.request({
                    url: "http://79.125.16.106/ArcGIS/rest/services/Andrew/MapperDemo/MapServer/exts/IUCNRedListSOE/GetSpeciesExtent",
                    callbackParamName: "callback",
                    content: {
                        f: "json",
                        ID_NO: spcID,
                        token: token
                    },
                    load: function(response){
                        var extent = new esri.geometry.Extent(response.extent);
                        extent.spatialReference = new esri.SpatialReference({
                            wkid: 102100
                        });
                        map.setExtent(extent, true);
                        dojo.connect(rdbLayer, "onUpdate", hideLoading); //now we have zoomed to the extent, wire up the rdblayer update to hide the loading icon when it has finished updating
                    },
                    error: esriConfig.defaults.io.errorHandler
                });
            }
            
            //DISABLE THE INTERACTIVITY IN THE OVERVIEW MAP
            function loadExtentMap(){
                extentMap.disableKeyboardNavigation();
                extentMap.disableMapNavigation();
                extentMap.disablePan();
            }
            
            //CALLED WHEN THE MAP EXTENT CHANGES AND DRAWS THE POLYGON ON THE OVERVIEW MAP
            function extentChanged(extent){
                extentMap.graphics.clear();
                var polygon = new esri.geometry.Polygon(new esri.SpatialReference({
                    wkid: 102100
                }));
                polygon.addRing([[extent.xmin, extent.ymin], [extent.xmin, extent.ymax], [extent.xmax, extent.ymax], [extent.xmax, extent.ymin], [extent.xmin, extent.ymin]]); //create the polygon for the overview map
                var screenGeometry = esri.geometry.toScreenGeometry(extentMap.extent, extentMap.width, extentMap.height, polygon); //convert it to a screen geometry to see how big it will be
                var screenPolygon = screenGeometry.rings[0]; //get the first ring of the screen geometry
                var minX = screenPolygon[0][0]; //get the minimum x screen coordinate
                var maxX = screenPolygon[2][0]; //get the maximum x screen coordinate
                if ((maxX - minX) < 3) { //if the polygon is smaller than 3 pixels across then it will not be visible, so draw as a point symbol
                    var centroid = extent.getCenter(); //get the centroid of the extent
                    symbol = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_SQUARE, 3, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 1), new dojo.Color([255, 0, 0]), 1);
                    extentMap.graphics.add(new esri.Graphic(centroid, symbol)); //create a simple marker symbol at the centroid of the extent
                }
                else {
                    symbol = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 1);
                    extentMap.graphics.add(new esri.Graphic(polygon, symbol));//create a polygon that is the size and shape of the main map
                }
            }
            
            //CALLED WHEN THE PAGE LOADS AND GETS THE SPECIES INFO
            function getSpeciesInfo(spcID){
                var spName = taxon.replace(" ", "-");
                dojo.io.script.get({
                    url: "http://api.iucnredlist.org/common_names/" + spcID + ".js?callback=parseSpeciesData"
                });
            }
            
            //ASYNCHRONOUS CALLBACK FUNCTION WITH THE RESULTS FOR THE SPECIES INFO
            function parseSpeciesData(results){
                if (results.features.length > 0) {
                    var featureAttributes = results.features[0].attributes; //get the attributes of any features returned
                    var taxon = featureAttributes["friendly_name"];
                    var species = data[0];
                    dojo.byId("spClass").innerHTML = capitaliseFirstLetter(species['class']);
                    dojo.byId("spOrder").innerHTML = capitaliseFirstLetter(species['order']);
                    dojo.byId("spFamily").innerHTML = capitaliseFirstLetter(species['family']);
                    dojo.byId("spGenus").innerHTML = capitaliseFirstLetter(species['genus']);
                    dojo.byId("spAuthority").innerHTML = capitaliseFirstLetter(species['authority']);
                    dojo.byId("spCategory").innerHTML = capitaliseFirstLetter(species['category']);
                    dojo.byId("species").innerHTML = "<i>" + taxon + "</i>"; //set the text in the UI
                    //                    dojo.attr(dojo.byId("species"), "class", "Status " + taxon);
                    //                    dojo.attr(dojo.byId("species"), "class", "Status");
                    dojo.doc.title = taxon; //set the document title
                    //                    dojo.byId("statusImage").src = "images/200px-Status_iucn3.1_" + featureAttributes["rl_category"] + ".svg.png";
                    dojo.byId("statusImage").src = "images/RL_" + featureAttributes["rl_category"] + ".png";
                    var fadeOut = dojo.fadeOut({
                        node: "mainLoadingDiv",
                        duration: 10
                    });
                    fadeOut.play(); //when all the data is loaded - hide the loading div
                    var fade = dojo.fadeIn({
                        node: "mainWindow",
                        duration: 250
                    });
                    fade.play(); //show the border container which contains the map and the tab container
                }
                else {
                    dojo.byId("title").innerHTML = "No species found";
                }
            }
            
            function capitaliseFirstLetter(word){
                return word.substr(0, 1).toUpperCase() + word.substr(1, word.length - 1).toLowerCase();
            }
        </script>
    </head>
    <body class="tundra">
        <div id="mainLoadingDiv">
            <!--shows until the basemap is loaded--><img src="images/loading.gif" alt="Loading image"/>
        </div>
        <div id="mapDiv">
            <!-- Map Section -->
            <div id="navToolbar" dojoType="dijit.Toolbar">
                <!--map toolbar-->
                <div dojoType="dijit.form.Button" id="zoomin" iconClass="zoominIcon" onClick="navToolbar.activate(esri.toolbars.Navigation.ZOOM_IN);">
                </div>
                <div dojoType="dijit.form.Button" id="zoomout" iconClass="zoomoutIcon" onClick="navToolbar.activate(esri.toolbars.Navigation.ZOOM_OUT);">
                </div>
                <div dojoType="dijit.form.Button" id="zoomfullext" iconClass="zoomfullextIcon" onClick="navToolbar.zoomToFullExtent();">
                </div>
                <div dojoType="dijit.form.Button" id="zoomprev" iconClass="zoomprevIcon" onClick="navToolbar.zoomToPrevExtent();">
                </div>
                <div dojoType="dijit.form.Button" id="zoomnext" iconClass="zoomnextIcon" onClick="navToolbar.zoomToNextExtent();">
                </div>
                <div dojoType="dijit.form.Button" id="pan" iconClass="panIcon" onClick="navToolbar.activate(esri.toolbars.Navigation.PAN);">
                </div>
                <div dojoType="dijit.form.Button" id="deactivate" iconClass="deactivateIcon" onClick="navToolbar.deactivate()">
                </div>
            </div>
            <div id="map">
                <!--map-->
                <div id="loadingDiv" style="width:16px;left:50%;top:50%;position:absolute;z-index:100">
                    <!--shows while the extent for the species is being retrieved--><img id="loadingImg" src="images/loading.gif" alt="Loading image"/>
                </div>
                <div dojoType="dijit.layout.ContentPane" id="basemapGalleryDiv" style="width:366px;height:490px">
                    <div id="basemapGallery">
                    </div>
                    <button dojoType="dijit.form.Button" onclick="hideBasemapGallery()">
                        OK
                    </button>
                </div>
            </div>
        </div>
        <div id="mainWindow" dojotype="dijit.layout.BorderContainer" design="headline" gutters="false" style="width:100%; height:100%;opacity:0">
            <!-- Right Sidebar Section-->
            <div dojotype="dijit.layout.ContentPane" id="rightPane" class="pane" region="right">
                <div class="paneContent" dojotype="dijit.layout.BorderContainer" design="headline" gutters="false">
                    <!--Panel Top-->
                    <div id="header" dojotype="dijit.layout.ContentPane" region="top">
                        <div id="taxonHierarchy">
                            <span id="spClass"></span>
                            | <span id="spOrder"></span>
                            | <span id="spFamily"></span>
                            | <span id="spGenus"></span>
                            |
                        </div>
                        <div>
                            <span id="species" class="status"></span>
                            <span id="spAuthority"></span>
                        </div>
                    </div>
                    <!--Panel Center-->
                    <div dojotype="dijit.layout.ContentPane" region="center">
                        <div dojotype="dijit.layout.BorderContainer" design="sidebar" gutters="false" style="width:100%;height:100%" id="infoTab">
                            <!--Info Tab-->
                            <div dojoType="dijit.layout.ContentPane" region="center">
                                <img id="statusImage" title="Threatened" src=""/><img id="speciesImage" src="http://i789.photobucket.com/albums/yy179/brezzy868792/orangutan.jpg" title="Image of Orang Utan"/>
                                <div id="legend">
                                    Legend:
                                    <div class="legendItem">
                                        <div class="legendItemSymbol">
                                        </div>
                                        <div class="legendItemText">
                                            Native (resident)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div dojoType="dijit.layout.ContentPane" region="bottom">
                                <button dojoType="dijit.form.Button" onclick="showBasemapGallery()" id="basemapGalleryButton">
                                    Click to open basemap gallery
                                </button>
                                <div id="extentMap">
                                </div>
                                <div id="iucnImage">
                                    <img src="images/iucn.png" alt="IUCN Image" title="IUCN Redlist Website" onclick="window.open('http://www.iucnredlist.org/')">
                                </div>
                            </div>
                        </div>
                    </div><!--Sidebar Bottom--><!--Panel bottom-->
                    <div id="footer" dojotype="dijit.layout.ContentPane" region="bottom">
                        <div>
                            T & Cs will be linked here
                        </div>
                        <div>
                            Source will go here
                        </div>
                        Published by IUCN<span id="owner"></span>
                    </div>
                </div>
            </div>
            <!-- Footer Section-->
        </div>
    </body>
</html>
